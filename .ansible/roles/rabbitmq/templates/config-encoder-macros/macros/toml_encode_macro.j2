{#
 # Jinja2 macro which converts Python data structure to TOML format
 #}

{%- macro toml_encode(
      item,
      convert_bools=false,
      convert_nums=false,
      first=[],
      indent="  ",
      level=0,
      prevkey="",
      prevtype="",
      quote='"') %}

  {%- if item is mapping %}
    {#- The item is a dict #}

    {#- First process all strings, numbers, booleans and lists #}
    {%- for key, val in item.iteritems() | sort -%}
      {%- if val is string or
          val is number or
          val in [True, False] or
          (
            val is not mapping and
            val | length > 0 and
            val[0] is not mapping) %}

        {#- The value is a string, a number, or a list -#}
        {{ indent * level }}{{ key }}{{ " = " }}{{ toml_encode(
            val,
            convert_bools=convert_bools,
            convert_nums=convert_nums,
            first=first,
            indent=indent,
            level=level,
            prevkey=prevkey) }}
        {%- if first.append(1) %}{% endif %}
      {%- endif %}
    {%- endfor %}

    {#- Then process all data structures #}
    {%- for key, val in item.iteritems() | sort %}
      {%- if val is not string and
          val is not number and
          val not in [True, False] and
          (
            val is mapping or
            val[0] is mapping) %}

        {%- set old_prevkey = prevkey %}
        {%- set old_level = level %}

        {%- if val is mapping %}
          {#- The val is a dict #}
          {%- if prevkey != "" and prevkey != key %}
            {%- set level = level + 1 %}
          {%- endif %}

          {%- set prevkey = (key if prevkey == "" else prevkey + "." + key) %}

          {%- if first | length > 0 -%}
            {{ "\n" }}
          {%- endif -%}

          {{ indent * level }}[{{ prevkey }}]{{ "\n" }}
        {%- elif val[0] is mapping %}
          {#- The val is a table #}
          {%- set prevkey = (key if prevkey == "" else prevkey + "." + key) %}
          {%- set level = level + 1 %}
        {%- endif -%}

        {{ toml_encode(
            val,
            convert_bools=convert_bools,
            convert_nums=convert_nums,
            first=first,
            indent=indent,
            level=level,
            prevkey=prevkey) }}

        {%- set prevkey = old_prevkey %}
        {%- set level = old_level %}
        {%- if first.append(1) %}{% endif %}
      {%- endif %}
    {%- endfor %}

  {%- elif item is number or
      (convert_nums and (
        item | int | string == item or
        item | float | string == item)) or
      (convert_bools and item in ["true", "True", "false", "False"]) or
      item in [True, False] %}

    {#- The item is a number or boolean -#}
    {{ item | lower }}

    {%- if prevtype != "list" -%}
      {{ "\n" }}
    {%- endif -%}

  {%- elif item is string %}
    {#- The item is a string -#}
    {{ quote ~ item | replace("\n", "\\n") | replace("\t", "\\t") ~ quote }}

    {%- if prevtype != "list" -%}
      {{ "\n" }}
    {%- endif -%}

  {%- else %}
    {#- The item is a list #}
    {%- if item[0] is mapping %}
      {%- for d in item -%}
        {{ "\n" }}{{ indent * level }}[[{{ prevkey }}]]{{ "\n" }}{{ toml_encode(
            d,
            convert_bools=convert_bools,
            convert_nums=convert_nums,
            first=first,
            indent=indent,
            level=level) }}
      {%- endfor %}
    {%- else -%}
      {{ "[" }}

      {%- for d in item -%}
        {{ toml_encode(
            d,
            convert_bools=convert_bools,
            convert_nums=convert_nums,
            first=first,
            indent=indent,
            level=level,
            prevtype="list") }}

        {%- if not loop.last -%}
          {{ ", " }}
        {%- endif %}
      {%- endfor -%}

      {{ "]" }}

      {%- if prevtype != "list" -%}
        {{ "\n" }}
      {%- endif -%}

    {%- endif %}
  {%- endif %}
{%- endmacro %}
