<?php
/**
 * Created by PhpStorm.
 * User: mb3
 * Date: 07.03.18
 * Time: 17:43
 */

namespace Tests\Bundle\UserBundle\Controller;

use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\UserBundle\Document\AuthorizationToken;
use MBH\Bundle\UserBundle\Document\User;


class ProfileControllerTest extends WebTestCase
{
    private const CHANGE_PASSWORD_URL_USER_PROFILE = '/user/profile';
    private const CHANGE_PASSWORD_FORM_NAME = 'mbh_bundle_userbundle_profiletype';
    private const CHANGE_PASSWORD_ALERT_MSG_BEGIN = 'Пароль дожен быть не меньше';
    private const CHANGE_PASSWORD_MIN_NUMBER_CHARSET = 8;

    private const USER_ADMIN = 'admin';
    private const API_TOKEN = 'TOKEN_FOR_TEST';

    private const PASS_VALID = '1234567_Valid';
    private const KEY_PASS_INVALID_1 = 'invalid_1';
    private const KEY_PASS_INVALID_2 = 'invalid_2';
    private const KEY_PASS_INVALID_3 = 'invalid_3';

    /** @var DocumentManager */
    private $dm;

    public static function setUpBeforeClass()
    {
        self::baseFixtures();
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->dm = $this->getDocumentManager();
    }

    public static function tearDownAfterClass()
    {
        self::clearDB();
    }

    /**
     * проверяем статус ответа
     */
    public function testStatusCode()
    {
        $this->getListCrawler(self::CHANGE_PASSWORD_URL_USER_PROFILE);

        $this->assertStatusCode(
            200, // or Symfony\Component\HttpFoundation\Response::HTTP_OK
            $this->client
        );

    }

    /**
     * проверка наличия сообщение:
     * "Пароль дожен быть не меньше 8 символов и содержать цифру и заглавную букву!"
     * и соответствия кол-ва минимальных символов
     */
    public function testAlertMsg()
    {
        $crawler = $this->getListCrawler(self::CHANGE_PASSWORD_URL_USER_PROFILE);

        $text = $crawler->filter('div:contains("' . self::CHANGE_PASSWORD_ALERT_MSG_BEGIN . '")')->text();

        if (preg_match('/.*(\d){1,2}/', $text, $matches)) {
            $this->assertEquals(self::CHANGE_PASSWORD_MIN_NUMBER_CHARSET, $matches[1]);
        } else {
            $this->assertTrue(false, 'not found alert message with max number a chars for the password');
        }
    }

    /**
     * ввод ошибочных паролей
     * смотрим кол-во сообщений с ошибками и текст
     */
    public function testInvalidPasswordSet()
    {
        $crawler = $this->getListCrawler(self::CHANGE_PASSWORD_URL_USER_PROFILE);

        $passwords = [
            self::KEY_PASS_INVALID_1 =>
                [
                    'first'  => '12',
                    'second' => '12',
                ],
            self::KEY_PASS_INVALID_2 =>
                [
                    'first'  => '12345678',
                    'second' => '12345678',
                ],
            self::KEY_PASS_INVALID_3 =>
                [
                    'first'  => self::PASS_VALID,
                    'second' => self::PASS_VALID . '_Wrong',
                ],
        ];

        foreach ($passwords as $key => $pass) {
            $result = $crawler
                ->filter('form[name="' . self::CHANGE_PASSWORD_FORM_NAME . '"]')
                ->form(
                    [
                        self::CHANGE_PASSWORD_FORM_NAME . '[plainPassword][first]'  => $pass['first'],
                        self::CHANGE_PASSWORD_FORM_NAME . '[plainPassword][second]' => $pass['second'],
                    ]
                );
            $result = $this->client->submit($result);

            switch ($key) {
                case self::KEY_PASS_INVALID_1:
                    $this->assertEquals(
                        2,
                        $result->filter('.input-errors li')->count(),
                        'there must be two error messages in the validation'
                    );
                    break;
                case self::KEY_PASS_INVALID_2:
                    $this->assertEquals(
                        1,
                        $result->filter('.input-errors li')->count(),
                        'there must be one error messages in the validation'
                    );
                    $this->assertContains(
                        'Пароль должен содержать хотя бы одну заглавную букву',
                        $result->filter('.input-errors li')->text()
                    );
                    break;
                case self::KEY_PASS_INVALID_3:
                    $this->assertEquals(
                        1,
                        $result->filter('.input-errors li')->count(),
                        'there must be one error messages in the validation'
                    );
                    $this->assertContains(
                        'Введенные пароли не совпадают',
                        $result->filter('.input-errors li')->text()
                    );
                    break;
            }
            // это тест в общем на наличие ошибок
            // $this->assertValidationErrors(['children[plainPassword].data'], $this->client->getContainer());
        }

    }

    public function testChangePassword()
    {
        /** @var User $user */
        $user = $this->dm->getRepository('MBHUserBundle:User')->findOneBy(['username' => self::USER_ADMIN]);
        $oldPassword = $user->getPassword();

        $crawler = $this->getListCrawler(self::CHANGE_PASSWORD_URL_USER_PROFILE);

        $form = $crawler
            ->filter('form[name="' . self::CHANGE_PASSWORD_FORM_NAME . '"]')
            ->form(
                [
                    self::CHANGE_PASSWORD_FORM_NAME . '[plainPassword][first]'  => self::PASS_VALID,
                    self::CHANGE_PASSWORD_FORM_NAME . '[plainPassword][second]' => self::PASS_VALID,
                ]
            );

        $this->client->submit($form);

        $this->dm->refresh($user);
        $this->assertNotEquals(
            $oldPassword,
            $user->getPassword(),
            'no set new password in the DB'
        );
    }

    /**
     * @depends testChangePassword
     */
    public function testAuthWithNewPass()
    {
        $this->client->request('GET', self::CHANGE_PASSWORD_URL_USER_PROFILE);
        $this->assertStatusCode(
            401,
            $this->client
        );

        $this->client = self::createClient(
            [],
            [
                'PHP_AUTH_USER' => self::USER_ADMIN,
                'PHP_AUTH_PW'   => self::PASS_VALID,
            ]
        );

        $this->client->request('GET', self::CHANGE_PASSWORD_URL_USER_PROFILE);

        $this->assertStatusCode(
            200,
            $this->client
        );

    }

    public function testAuthenticationWithInvalidToken()
    {
        $this->setApiToken();

        $this->client = self::createClient([], []);

        $this->client->request('GET', self::CHANGE_PASSWORD_URL_USER_PROFILE . '?apiKey=InvalidToken');

        $this->assertStatusCode(
            401,
            $this->client
        );
    }

    public function testChangePassWithToken()
    {
        $this->setApiToken();

        $this->client = self::createClient([], []);

        $this->client->request('GET', self::CHANGE_PASSWORD_URL_USER_PROFILE . '?apiKey=' . self::API_TOKEN);

        $this->assertStatusCode(
            302,
            $this->client
        );
    }

    private function setApiToken(): void
    {
        /** @var User $user */
        $user = $this->dm->getRepository('MBHUserBundle:User')
            ->findOneBy([])
            ->setApiToken(self::API_TOKEN, new \DateTime('+1 day'));
        $this->dm->flush();
    }

    private function getDocumentManager()
    {
        return $this->getContainer()->get('doctrine.odm.mongodb.document_manager');
    }
}