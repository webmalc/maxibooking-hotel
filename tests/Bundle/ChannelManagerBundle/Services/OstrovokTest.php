<?php


namespace Tests\Bundle\ChannelManagerBundle\Services;


use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\ChannelManagerBundle\Document\OstrovokConfig;
use MBH\Bundle\ChannelManagerBundle\Document\Room as CMRoom;
use MBH\Bundle\ChannelManagerBundle\Document\Tariff as CMTariff;
use MBH\Bundle\ChannelManagerBundle\Lib\Ostrovok\OstrovokApiService;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\HotelBundle\Document\RoomType;
use MBH\Bundle\PriceBundle\Document\Tariff;

class OstrovokTest extends WebTestCase
{
    public function setUp()
    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        $this->createOstrovokConfig();
    }


    public function testUpdateRooms()
    {
//        $api = $this->createMock(OstrovokApiService::class);
//        $api->expects($this->once())->method('updateRNA')->with($this->isType('array'));
//        $service = $this->getService($api);
//
//        $actual = $service->updateRooms();
        $this->assertTrue(true);
    }



    private function getService(\PHPUnit_Framework_MockObject_MockObject $mock)
    {
        $this->getContainer()->set('ostrovok_api_service', $mock);

        return $this->getContainer()->get('mbh.channelmanager.ostrovok');
    }

    private function createOstrovokConfig()
    {
        $dm = $this->getContainer()->get('doctrine.odm.mongodb.document_manager');
        /** @var Hotel $hotel */
        $hotel = $dm->getRepository(Hotel::class)->findOneBy([]);
        $config = new OstrovokConfig();


        $allRooms = $dm->getRepository(RoomType::class)->findBy(['hotel.id' => $hotel->getId()]);
        $allTariffs = $dm->getRepository(Tariff::class)->findBy(['hotel.id' => $hotel->getId()]);

        $CMRoom1 = new CMRoom();
        $CMRoom1->setRoomId('RoomId1')->setRoomType(array_pop($allRooms));
        $CMRoom2 = new CMRoom();
        $CMRoom2->setRoomId('RoomId2')->setRoomType(array_pop($allRooms));
        $config->addRoom($CMRoom1)->addRoom($CMRoom2);

        $CMTariff1 = new CMTariff();
        $CMTariff1->setTariffId('TariffId1')->setTariff(array_pop($allTariffs));
        $CMTariff2 = new CMTariff();
        $CMTariff2->setTariffId('TariffId2')->setTariff(array_pop($allTariffs));
        $config->addTariff($CMTariff1)->addTariff($CMTariff2);
        $config->setIsConfirmedWithDataWarnings(true);


        $dm->persist($config);
        $hotel->setOstrovokConfig($config);
        $dm->flush($hotel);
    }
}