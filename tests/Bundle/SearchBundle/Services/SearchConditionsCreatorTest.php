<?php

namespace Tests\Bundle\SearchBundle\Services;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\ClientBundle\Document\ClientConfig;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\HotelBundle\Document\HotelRepository;
use MBH\Bundle\HotelBundle\Document\RoomType;
use MBH\Bundle\PriceBundle\Document\Tariff;
use MBH\Bundle\SearchBundle\Document\SearchConditions;
use MBH\Bundle\SearchBundle\Lib\Exceptions\SearchConditionException;
use MBH\Bundle\SearchBundle\Services\SearchConditionsCreator;
use Symfony\Component\PropertyAccess\PropertyAccess;

class SearchConditionsCreatorTest extends WebTestCase
{
    /** @var SearchConditionsCreator */
    private $creator;
    /** @var DocumentManager */
    private $dm;

    public function setUp()
    {
        $this->creator = $this->getContainer()->get('mbh_search.search_condition_creator');
        $this->dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testHandleSuccessData1(): void
    {

        $roomTypes = $this->getRoomTypes();
        $roomIds = array_keys($roomTypes);
        $tariffs = $this->getTariffs();
        $tariffIds = array_keys($tariffs);
        $hotels = $this->getAllHotels();
        $hotelIds = array_keys($hotels);
        $data = [
            'begin' => '21.04.2018',
            'end' => '22.04.2018',
            'adults' => 3,
            'children' => 3,
            'roomTypes' => $roomIds,
            'tariffs' => $tariffIds,
            'hotels' => $hotelIds,
            'childrenAges' => ['3', 7, '12'],
            'isOnline' => true
        ];
        /** @var SearchConditions $actual */
        $actual = $this->creator->createSearchConditions($data);
        $this->assertNotEmpty($actual->getSearchHash());
        $this->assertEquals(new \DateTime($data['begin']), $actual->getBegin());
        $this->assertEquals(new \DateTime($data['end']), $actual->getEnd());
        $this->assertEquals(3, $actual->getAdults());
        $this->assertEquals(3, $actual->getChildren());
        $this->assertEquals([3,7,12], $actual->getChildrenAges());
        $this->assertEquals(new ArrayCollection(array_values($roomTypes)), $actual->getRoomTypes());
        $this->assertEquals(new ArrayCollection(array_values($tariffs)), $actual->getTariffs());
        $this->assertEquals(new ArrayCollection(array_values($hotels)), $actual->getHotels());
        $this->assertTrue($actual->isOnline());
    }

    /**
     * @dataProvider successDataProvider
     */
    public function testHandleSuccessData($data): void
    {
        /** @var SearchConditions $actual */
        $actual = $this->creator->createSearchConditions($data['raw']);

        $this->assertNotEmpty($actual->getSearchHash());
        $this->assertEquals(new \DateTime($data['raw']['begin']), $actual->getBegin());
        $this->assertEquals(new \DateTime($data['raw']['end']), $actual->getEnd());
        $this->assertEquals($data['raw']['adults'], $actual->getAdults());
        $this->assertNull($actual->getChildren());


    }

    /**
     * @dataProvider successDataProvider
     */
    public function testHandleSuccessCategoryData($data): void
    {
        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        $config = $this->getContainer()->get('mbh_search.client_config_repository')->fetchConfig();
        $config->setUseRoomTypeCategory(true);
        $dm->flush($config);

        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        $repo = $dm->getRepository(Hotel::class);
        /** @var HotelRepository $repo */
        $hotelIds = $repo->getSearchActiveIds();
        $data['raw']['roomTypes'] = ['allrooms_'.$hotelIds[0]];
        /** @var SearchConditions $actual */
        $actual = $this->creator->createSearchConditions($data['raw']);

        $this->assertNotEmpty($actual->getSearchHash());
        $this->assertEquals(new \DateTime($data['raw']['begin']), $actual->getBegin());
        $this->assertEquals(new \DateTime($data['raw']['end']), $actual->getEnd());
        $this->assertEquals($data['raw']['adults'], $actual->getAdults());
        $this->assertNull($actual->getChildren());

        $config->setUseRoomTypeCategory(false);
        $dm->flush($config);

        $roomTypes = $actual->getRoomTypes();
        foreach ($roomTypes as $roomType) {
            $this->assertInstanceOf(RoomType::class, $roomType);
        }


    }

    public function testHandleAdditionalEndMethod(): void
    {
        $data = [
            'begin' => '21.04.2018',
            'end' => '22.04.2018',
            'adults' => 3,
            'additionalBegin' => 2
        ];

        $object = (new SearchConditions())
            ->setBegin(new \DateTime('2018-04-21 midnight'))
            ->setEnd(new \DateTime('2018-04-22 midnight'))
            ->setAdults(3)
            ->setAdditionalBegin(2)
            ->setAdditionalEnd(2);

        $result = $this->creator->createSearchConditions($data);
        $this->assertSame($object->getAdditionalEnd(), $result->getAdditionalEnd(), 'Data from form is not equal expected');

    }


    /**
     * @throws SearchConditionException
     * @dataProvider failDataProvider
     */
    public function testHandleFail($data): void
    {
        if (isset($data['tariffs'])) {
            $data['tariffs'] = array_merge(
                $data['tariffs'],
                array_keys($this->getTariffs()),
                ['wrong tariff name']
            );
        }

        if (isset($data['roomTypes'])) {
            $data['roomTypes'] = array_merge(
                $data['roomTypes'],
                array_keys($this->getRoomTypes()),
                ['wrong roomType name']
            );
        }

        if (isset($data['hotels'])) {
            $data['hotels'] = array_merge(
                $data['hotels'],
                array_keys($this->getAllHotels()),
                ['wrong hotel name']
            );
        }

        $this->expectException(SearchConditionException::class);
        $this->creator->createSearchConditions($data);
    }


    private function getTariffs()
    {
        return $this->getAllFromRepo(Tariff::class);
    }

    private function getRoomTypes(): ?array
    {
        return $this->getAllFromRepo(RoomType::class);
    }

    private function getAllHotels(): ?array
    {
        return $this->getAllFromRepo(Hotel::class);
    }

    private function getAllFromRepo(string $reponame)
    {
        $qb = $this->dm->createQueryBuilder($reponame);

        /** @var \Doctrine\MongoDB\ArrayIterator $ids */
        return $qb->find()->getQuery()->execute()->toArray();
    }

    public function successDataProvider(): array
    {
        return [
            [
                [
                    'raw' => [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'additionalBegin' => 2,
                        'additionalEnd' => 3,
                    ]
                ],
            ],
        ];
    }


    public function failDataProvider(): array
    {
        return [
            [
                'begin more than end' => [
                    'begin' => '23.04.2018',
                    'end' => '22.04.2018',
                    'adults' => 3,
                    'children' => 3,
                    'childrenAges' => [3, 4, 5],
                ],

            ],
            [
                'wrong date data' =>
                    [
                        'begin' => 'wrong ',
                        'end' => 'data',
                        'adults' => 3,
                        'children' => 3,
                        'childrenAges' => [3, 4, 5],
                    ],
            ],
            [
                'wrong tariff data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 3,
                        'childrenAges' => [3, 4, 5],
                        'tariffs' => [],
                    ],
            ],
            [
                'wrong roomType data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 3,
                        'childrenAges' => [3, 4, 5],
                        'roomTypes' => [],
                    ],
            ],
            [
                'wrong additional data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 3,
                        'childrenAges' => [3, 4, 5],
                        'additionalBefore' => -1,
                    ],
            ],
            [
                'wrong additional data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 3,
                        'childrenAges' => [3, 4, 5, 6],
                    ],
            ],
            [
                'wrong hotel data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 3,
                        'childrenAges' => [3, 4, 5, 6],
                        'hotels' => []
                    ],
            ]

        ];
    }

}