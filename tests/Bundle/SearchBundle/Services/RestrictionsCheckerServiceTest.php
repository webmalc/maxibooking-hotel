<?php

namespace Tests\Bundle\SearchBundle\Services;

use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\SearchBundle\Lib\DataHolder;
use MBH\Bundle\SearchBundle\Lib\Exceptions\RestrictionsCheckerException;
use MBH\Bundle\SearchBundle\Lib\Restrictions\RestrictionsCheckerInterface;
use MBH\Bundle\SearchBundle\Lib\SearchQuery;
use MBH\Bundle\SearchBundle\Services\RestrictionsCheckerService;

class RestrictionsCheckerServiceTest extends WebTestCase
{
    /** @var RestrictionsCheckerService */
    private $service;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = $this->getContainer()->get('mbh_search.restrictions_checker_service');
    }


    public function testCheckSuccessOrFail(): void
    {
        $dataHolder = $this->createMock(DataHolder::class);
        $dataHolder->expects($this->once())->method('getCheckNecessaryRestrictions')->willReturn([1, 2, 4]);

        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $checker->expects($this->once())->method('check')->willReturn(true);

        $service = new RestrictionsCheckerService($dataHolder);
        $service->addChecker($checker);

        $searchQuery = new SearchQuery();
        $actual = $service->check($searchQuery);
        $this->assertTrue($actual);
        $this->assertTrue($searchQuery->isRestrictionsWhereChecked());

    }

    public function testCheckFail(): void
    {
        $dataHolder = $this->createMock(DataHolder::class);
        $dataHolder->expects($this->once())->method('getCheckNecessaryRestrictions')->willReturn([1, 2, 4]);

        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $message = 'Error when check';
        $checker->expects($this->once())->method('check')->willThrowException(new RestrictionsCheckerException($message));

        $service = new RestrictionsCheckerService($dataHolder);
        $service->addChecker($checker);

        $begin = new \DateTime('midnight');
        $end = new \DateTime('midnight +1 days');
        $tariff = 'tariffId';
        $roomType = 'roomTypeId';

        $searchQuery = new SearchQuery();
        $searchQuery
            ->setBegin($begin)
            ->setEnd($end)
            ->setTariffId($tariff)
            ->setRoomTypeId($roomType)
        ;

        $actual = $service->check($searchQuery);
        $this->assertFalse($actual);
        $errors = $service->getErrors();
        $this->assertCount(1, $errors);
        $actualError = reset($errors);
        $expectedError = [
            'date' => $begin->format('d-m-Y') . '_' . $end->format('d-m-Y'),
            'tariff' => $tariff,
            'roomType' => $roomType,
            'error' => $message

        ];
        $this->assertArraySimilar($expectedError, $actualError);

    }


    public function testAlreadyChecked(): void
    {
        $dataHolder = $this->createMock(DataHolder::class);
        $dataHolder->expects($this->never())->method('getCheckNecessaryRestrictions');

        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $checker->expects($this->never())->method('check');

        $service = new RestrictionsCheckerService($dataHolder);
        $service->addChecker($checker);

        $searchQuery = new SearchQuery();
        $searchQuery->setRestrictionsWhereChecked();
        $actual = $service->check($searchQuery);
        $this->assertTrue($actual);
        $this->assertTrue($searchQuery->isRestrictionsWhereChecked());
    }
}