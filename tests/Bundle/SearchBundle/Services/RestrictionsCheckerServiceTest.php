<?php


use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\BaseBundle\Service\Helper;
use MBH\Bundle\PriceBundle\Document\Tariff;
use MBH\Bundle\SearchBundle\Document\SearchConditions;
use MBH\Bundle\SearchBundle\Lib\Exceptions\RestrictionsCheckerException;
use MBH\Bundle\SearchBundle\Lib\Exceptions\RestrictionsCheckerServiceException;
use MBH\Bundle\SearchBundle\Lib\Restrictions\OnClose;
use MBH\Bundle\SearchBundle\Lib\Restrictions\RestrictionsCheckerInterface;
use MBH\Bundle\SearchBundle\Lib\SearchQuery;
use MBH\Bundle\SearchBundle\Services\RestrictionsCheckerService;

class RestrictionsCheckerServiceTest extends WebTestCase
{
    /**
     * @var RestrictionsCheckerService
     */
    private $service;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $dm = $this->createMock(DocumentManager::class);
        $service = new RestrictionsCheckerService($dm);
        $conditions = $this->createMock(SearchConditions::class);
        $service->setConditions($conditions);
        $this->service = $service;
    }


    public function testCheckSuccess(): void
    {
        $service = $this->service;
        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $checker->expects($this->once())->method('check')->willReturn(true);
        $service->addChecker($checker);
        $searchQuery = $this->getSearchQuery();
        /** @var SearchQuery $searchQuery */
        $actual = $service->check($searchQuery);

        $this->assertTrue($actual);
        $this->assertTrue($searchQuery->isRestrictionsWhereChecked());

    }

    public function testCheckFail(): void
    {
        $service = $this->service;
        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $checker->expects($this->once())->method('check')->willThrowException(new RestrictionsCheckerException());
        $service->addChecker($checker);
        $searchQuery = $this->getSearchQuery();
        /** @var SearchQuery $searchQuery*/
        $actual = $service->check($searchQuery);

        $this->assertFalse($actual);
        $this->assertFalse($searchQuery->isRestrictionsWhereChecked());
    }

    public function testFailServiceWithNoCondition(): void
    {
        $dm = $this->createMock(DocumentManager::class);
        $service = new RestrictionsCheckerService($dm);
        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $service->addChecker($checker);
        $searchQuery = $this->getSearchQuery();
        /** @var SearchQuery $searchQuery*/
        $this->expectException(RestrictionsCheckerServiceException::class);
        $service->check($searchQuery);
    }

    public function testAlreadyChecked(): void
    {
        $service = $this->service;
        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $checker->expects($this->never())->method('check');
        $service->addChecker($checker);
        $searchQuery = $this->getSearchQuery();
        /** @var SearchQuery $searchQuery */
        $searchQuery->setRestrictionsWhereChecked();
        $service->check($searchQuery);
    }

    public function testGetRestrictions(): void
    {
        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        $tariff = $dm->getRepository(Tariff::class)->findOneBy([]);
        $service = new RestrictionsCheckerService($dm);
        $checker = $this->createMock(RestrictionsCheckerInterface::class);
        $service->addChecker($checker);
        $conditions = new SearchConditions();
        $conditions
            ->setBegin(new DateTime('03-05-2018'))
            ->setEnd(new DateTime('06-05-2018'))
            ->setAdults(2)
            ->setChildren(1)
            ->setChildrenAges([7])
            ->setAdditionalBegin(2)
            ->setAdditionalEnd(2)
            ->addTariff($tariff)


        ;
        $service->setConditions($conditions);

        $method = $this->getPrivateMethod(RestrictionsCheckerService::class, 'getRestrictions');
        $actual = $method->invoke($service);

        $this->assertNotEmpty($actual);
    }

    private function getSearchQuery()
    {
        $methods = Helper::getAllMethodExept(SearchQuery::class, ['isRestrictionsWhereChecked', 'setRestrictionsWhereChecked']);
        return $this->getMockBuilder(SearchQuery::class)->setMethods($methods)->getMock();
    }

    private function getPrivateMethod($className, $methodName)
    {
        $reflector = new ReflectionClass($className);
        $method = $reflector->getMethod($methodName);
        $method->setAccessible(true);

        return $method;
    }
}