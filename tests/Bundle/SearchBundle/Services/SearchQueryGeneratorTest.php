<?php


use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\BaseBundle\Service\Helper;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\HotelBundle\Document\RoomType;
use MBH\Bundle\PriceBundle\Document\Tariff;
use MBH\Bundle\SearchBundle\Document\SearchConditions;
use MBH\Bundle\SearchBundle\Lib\Exceptions\SearchQueryGeneratorException;
use MBH\Bundle\SearchBundle\Services\SearchQueryGenerator;

class SearchQueryGeneratorTest extends WebTestCase
{
    /** @var DocumentManager */
    private $dm;

    public function setUp()
    {
        $this->dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGenerate()
    {
        $roomTypes = $this->dm->getRepository(RoomType::class)->findAll();
        $tariffs = $this->dm->getRepository(Tariff::class)->findAll();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $conditions = new SearchConditions();
        $conditions
            ->setBegin(new \DateTime('2018-04-21 midnight'))
            ->setEnd(new \DateTime('2018-04-22 midnight'))
            ->setAdults(3)
            ->setChildren(4)
//            ->setRoomTypes(new ArrayCollection(array_values($roomTypes)))
//            ->setTariffs(new ArrayCollection(array_values($tariffs)))
            ->setAdditionalBegin(1);
        $generator->generate($conditions);

        $this->assertEquals(3, $generator->getQueuesNum());
        $this->assertEquals('this is must be hash', $generator->getSearchQueryHash());
    }


    /**
     * @param DateTime $dateBegin
     * @param DateTime $dateEnd
     * @param int $additionalDays
     * @dataProvider addingDatesProvider
     */
    public function testPrepareConditionsForSearchQueries(
        \DateTime $dateBegin,
        \DateTime $dateEnd,
        int $additionalDays
    ): void {
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $conditions = new SearchConditions();
        $conditions
            ->setBegin($dateBegin)
            ->setEnd($dateEnd)
            ->setAdults(3)
            ->setChildren(4)
            ->setAdditionalBegin($additionalDays);

        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'prepareConditionsForSearchQueries');
        $actual = $method->invokeArgs($generator, [$conditions]);
        $roomTypeQb = $this->dm->getRepository(RoomType::class)->createQueryBuilder();
        $tariffQb = $this->dm->getRepository(Tariff::class)->createQueryBuilder();

        $hotels = $this->dm->getRepository(Hotel::class)->findAll();
        $expectedCount = 0;
        /** @var Hotel $hotel */
        foreach ($hotels as $hotel) {
            $roomTypesCount = $roomTypeQb->field('hotel.id')->equals($hotel->getId())->getQuery()->count();
            $tariffCount = $tariffQb->field('hotel.id')->equals($hotel->getId())->getQuery()->count();
            $expectedCount += $roomTypesCount * $tariffCount;
        }
        $expectedCount *= $this->calculateAdditionalDays($dateBegin, $dateEnd, $additionalDays);

        $this->assertCount($expectedCount, $actual);

    }

    public function testFailPrepareConditionsForSearchQueries2(): void
    {
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');

        $conditions = new SearchConditions();
        $conditions
            ->setBegin(new \DateTime('2018-04-21 midnight'))
            ->setEnd(new \DateTime('2018-03-21 midnight'))
            ->setAdults(3)
            ->setChildren(4)
            ->setAdditionalBegin(1);

        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'prepareConditionsForSearchQueries');
        $this->expectException(SearchQueryGeneratorException::class);
        $method->invokeArgs($generator, [$conditions]);

    }

    public function testGetTariffIdsOneTariffNoHotel(): void
    {
        $tariff = $this->dm->getRepository(Tariff::class)->findOneBy([]);

        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getTariffIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection([$tariff]), [], true]);

        $expected = [
            $tariff->getHotel()->getId() => [
                $tariff->getId(),
            ],
        ];

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertEquals($expected, $actual);
    }

    public function testGetTariffIdsNoTariffNoHotel(): void
    {
        $tariffs = $this->dm->getRepository(Tariff::class)->findAll();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getTariffIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection(), [], false]);

        $expected = [];
        foreach ($tariffs as $tariff) {
            $expected[$tariff->getHotel()->getId()][] = $tariff->getId();
        }

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertEquals($expected, $actual);
    }

    public function testGetTariffIdsOneTariffOneHotel(): void
    {
        $tariff = $this->dm->getRepository(Tariff::class)->findOneBy([]);
        $hotelId = $tariff->getHotel()->getId();
        $strangerHotel = $this->dm->createQueryBuilder(Hotel::class)->field('id')->notEqual($hotelId)->limit(
            1
        )->getQuery()->execute()->toArray();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getTariffIds');
        $actual = $method->invokeArgs(
            $generator,
            [new ArrayCollection([$tariff]), [array_values($strangerHotel)], false]
        );
        $expected = [
            $tariff->getHotel()->getId() => [
                $tariff->getId(),
            ],
        ];
        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertEquals($expected, $actual);

    }

    public function testGetTariffIdsNoTariffOneHotel(): void
    {
        $hotel = $this->dm->getRepository(Hotel::class)->findOneBy([]);
        $tariffs = $this->dm->createQueryBuilder(Tariff::class)->field('hotel.id')->equals($hotel->getId())->getQuery(
        )->execute()->toArray();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getTariffIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection([]), [$hotel->getId()], false]);

        foreach ($tariffs as $tariff) {
            $expected[$hotel->getId()][] = $tariff->getId();
        }

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertEquals($expected, $actual);
    }


    public function testGetRoomTypeIdsOneRoomTypeNoHotel(): void
    {
        $roomType = $this->dm->getRepository(RoomType::class)->findOneBy([]);
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getRoomTypeIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection([$roomType]), []]);
        $expected = [
            $roomType->getHotel()->getId() => [
                $roomType->getId(),
            ],
        ];

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertEquals($expected, $actual);
    }

    public function testGetRoomTypeIdsOneRoomTypeOneHotel(): void
    {
        $roomType = $this->dm->getRepository(RoomType::class)->findOneBy([]);
        $hotel = $this->dm->createQueryBuilder(Hotel::class)->field('id')->notEqual(
            $roomType->getHotel()->getId()
        )->getQuery()->execute()->toArray();
        $hotelIds = Helper::toIds($hotel);
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getRoomTypeIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection([$roomType]), [$hotelIds]]);
        $expected = [
            $roomType->getHotel()->getId() => [
                $roomType->getId(),
            ],
        ];
        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertEquals($expected, $actual);
    }

    public function testGetRoomTypeIdsNoRoomTypeNoHotel(): void
    {
        $roomTypes = $this->dm->getRepository(RoomType::class)->findAll();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getRoomTypeIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection(), []]);
        $expected = [];
        foreach ($roomTypes as $roomType) {
            $expected[$roomType->getHotel()->getId()][] = $roomType->getId();
        }

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertArraySimilar($expected, $actual);
    }

    public function testGetRoomTypeIdsNoRoomTypeOneHotel(): void
    {
        $hotel = $this->dm->getRepository(Hotel::class)->findOneBy([]);
        $roomTypes = $this->dm->createQueryBuilder(RoomType::class)->field('hotel.id')->equals(
            $hotel->getId()
        )->getQuery()->execute()->toArray();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getRoomTypeIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection(), [$hotel->getId()]]);
        $expected = [];
        foreach ($roomTypes as $roomType) {
            $expected[$hotel->getId()][] = $roomType->getId();
        }

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertArraySimilar($expected, $actual);
    }

    public function testGetRoomTypeIdsNoRoomTypeTwoHotel(): void
    {
        $hotels = $this->dm->getRepository(Hotel::class)->findAll();
        $hotelsIds = Helper::toIds($hotels);
        $roomTypes = $this->dm->createQueryBuilder(RoomType::class)->field('hotel.id')->in($hotelsIds)->getQuery(
        )->execute()->toArray();
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'getRoomTypeIds');
        $actual = $method->invokeArgs($generator, [new ArrayCollection(), $hotelsIds]);
        $expected = [];
        foreach ($roomTypes as $roomType) {
            $expected[$roomType->getHotel()->getId()][] = $roomType->getId();
        }

        $this->assertNotEmpty($actual, 'Result is empty!');
        $this->assertArraySimilar($expected, $actual);
    }

    /**
     * @dataProvider combineIdsProvider
     */
    public function testCombineTariffWithRoomType($roomTypeIds, $tariffIds, $expected): void
    {
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'combineTariffWithRoomType');
        $actual = $method->invokeArgs($generator, [$roomTypeIds, $tariffIds]);


        $this->assertArraySimilar($expected, $actual);
    }

    /**
     * @dataProvider combineFailIdsProvider
     */
    public function testFailCombineTariffWithRoomType($roomTypeIds, $tariffIds): void
    {
        $generator = $this->getContainer()->get('mbh_search.search_query_generator');
        $method = $this->getPrivateMethod(SearchQueryGenerator::class, 'combineTariffWithRoomType');
        $this->expectException(SearchQueryGeneratorException::class);
        $method->invokeArgs($generator, [$roomTypeIds, $tariffIds]);

    }

    private function getPrivateMethod($className, $methodName)
    {
        $reflector = new ReflectionClass($className);
        $method = $reflector->getMethod($methodName);
        $method->setAccessible(true);

        return $method;
    }



    public function combineIdsProvider(): array
    {
        return [
            [
                'roomTypeIds' => [
                    'hotelOne' =>
                        [
                            'roomTypeHotel1Id1',
                            'roomTypeHotel1Id2',
                        ],
                    'hotelTwo' =>
                        [
                            'roomTypeHotel2Id1',
                            'roomTypeHotel2Id2',
                        ],
                ],
                'tariffids' => [
                    'hotelOne' =>
                        [
                            'tariffHotel1Id1',
                            'tariffHotel1Id2',
                        ],
                    'hotelTwo' =>
                        [
                            'tariffHotel2Id1',
                            'tariffHotel2Id2',
                        ],
                ],
                'expected' => [
                    ['roomType' => 'roomTypeHotel1Id1', 'tariff' => 'tariffHotel1Id1'],
                    ['roomType' => 'roomTypeHotel1Id1', 'tariff' => 'tariffHotel1Id2'],
                    ['roomType' => 'roomTypeHotel1Id2', 'tariff' => 'tariffHotel1Id1'],
                    ['roomType' => 'roomTypeHotel1Id2', 'tariff' => 'tariffHotel1Id2'],
                    ['roomType' => 'roomTypeHotel2Id1', 'tariff' => 'tariffHotel2Id1'],
                    ['roomType' => 'roomTypeHotel2Id1', 'tariff' => 'tariffHotel2Id2'],
                    ['roomType' => 'roomTypeHotel2Id2', 'tariff' => 'tariffHotel2Id1'],
                    ['roomType' => 'roomTypeHotel2Id2', 'tariff' => 'tariffHotel2Id2'],
                ],
            ],
        ];
    }

    public function combineFailIdsProvider(): array
    {
        return [
            [
                'roomTypeIds' => [
                    'hotelOne' =>
                        [
                            'roomTypeHotel1Id1',
                            'roomTypeHotel1Id2',
                        ],
                    'hotelTwo' =>
                        [
                            'roomTypeHotel2Id1',
                            'roomTypeHotel2Id2',
                        ],
                ],
                'tariffids' => [
                    'hotelOneThree' =>
                        [
                            'tariffHotel1Id1',
                            'tariffHotel1Id2',
                        ],
                    'hotelTwoFour' =>
                        [
                            'tariffHotel2Id1',
                            'tariffHotel2Id2',
                        ],
                ],
            ],
            [
                'roomTypeIds' => [
                    'hotelOne' =>
                        [
                            'roomTypeHotel1Id1',
                            'roomTypeHotel1Id2',
                        ],
                    'hotelTwo' =>
                        [
                            'roomTypeHotel2Id1',
                            'roomTypeHotel2Id2',
                        ],
                ],
                'tariffids' => [],
            ],
        ];
    }

    public function addingDatesProvider()
    {
        return [
            [

                new \DateTime('01-05-2018 midnight'),
                new \DateTime('02-05-2018 midnight'),
                3,

            ],
            [

                new \DateTime('01-05-2018 midnight'),
                new \DateTime('02-05-2018 midnight'),
                0,

            ],
        ];
    }

    private function calculateAdditionalDays(\DateTime $begin, \DateTime $end, $range): int
    {
        $begins = $this->getContainer()->get('mbh_search.additional_days_generator')->generate($begin, $range);
        $ends = $this->getContainer()->get('mbh_search.additional_days_generator')->generate($end, $range);

        $dates = 0;
        foreach ($begins as $dateBegin) {
            foreach ($ends as $dateEnd) {
                if ($dateBegin < $dateEnd) {
                    $dates++;
                }
            }
        }

        return $dates;
    }
}