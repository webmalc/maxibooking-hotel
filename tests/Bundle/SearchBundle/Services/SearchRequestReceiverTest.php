<?php


use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\HotelBundle\Document\RoomType;
use MBH\Bundle\PriceBundle\Document\Tariff;
use MBH\Bundle\SearchBundle\Document\SearchConditions;
use MBH\Bundle\SearchBundle\Lib\Exceptions\SearchConditionException;
use MBH\Bundle\SearchBundle\Services\SearchRequestReceiver;

class SearchRequestReceiverTest extends WebTestCase
{
    /** @var SearchRequestReceiver */
    private $receiver;
    /** @var DocumentManager */
    private $dm;

    public function setUp()
    {
        $this->receiver = $this->getContainer()->get('mbh_search.search_request_receiver');
        $this->dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testHandleSuccess(): void
    {
        $roomTypes = $this->getRoomTypes();
        $roomIds = array_keys($roomTypes);
        $tariffs = $this->getTariffs();
        $tariffIds = array_keys($tariffs);
        $data = [
            'begin' => '21.04.2018',
            'end' => '22.04.2018',
            'adults' => 3,
            'children' => 4,
            'roomTypes' => $roomIds,
            'tariffs' => $tariffIds,
            'additionalBefore' => 2,
            'additionalAfter' => 3,
            'childrenAges' => ['3',7,15]
        ];

        $result = $this->receiver->handleData($data);

        $object = new SearchConditions();
        $object
            ->setBegin(new \DateTime('2018-04-21 midnight'))
            ->setEnd(new \DateTime('2018-04-22 midnight'))
            ->setAdults(3)
            ->setChildren(4)
            ->setRoomTypes(new ArrayCollection(array_values($roomTypes)))
            ->setTariffs(new ArrayCollection(array_values($tariffs)))
            ->setAdditionalBefore(2)
            ->setAdditionalAfter(3)
            ->setChildrenAges([3,7,15])
        ;

        $this->assertEquals($object, $result, 'Data from form is not equal expected');

    }

    /**
     * @throws SearchConditionException
     * @dataProvider failData
     */
    public function testHandleFail($data): void
    {
        if (isset($data['tariffs'])) {
            $data['tariffs'] = array_merge($data['tariffs'], array_keys($this->getTariffs()), ['wrong tariff name']);
        }

        if (isset($data['roomTypes'])) {
            $data['roomTypes'] = array_merge($data['roomTypes'], array_keys($this->getRoomTypes()), ['wrong roomType name']);
        }

        $this->expectException(SearchConditionException::class);
        $this->receiver->handleData($data);
    }


    private function getTariffs()
    {
        return $this->getAllFromRepo(Tariff::class);
    }

    private function getRoomTypes(): ?array
    {
        return $this->getAllFromRepo(RoomType::class);
    }

    private function getAllFromRepo(string $reponame)
    {
        $qb = $this->dm->createQueryBuilder($reponame);

        /** @var \Doctrine\MongoDB\ArrayIterator $ids */
        return $qb->find()->getQuery()->execute()->toArray();
    }


    public function failData(): array
    {
        return [
            [
                'begin more than end' => [
                    'begin' => '23.04.2018',
                    'end' => '22.04.2018',
                    'adults' => 3,
                    'children' => 4,
                ],

            ],
            [
                'wrong date data' =>
                    [
                        'begin' => 'wrong ',
                        'end' => 'data',
                        'adults' => 3,
                        'children' => 4,
                    ],
            ],
            [
                'wrong tariff data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 4,
                        'tariffs' => []
                    ],
            ],
            [
                'wrong roomType data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 4,
                        'roomTypes' => []
                    ],
            ],
            [
                'wrong additional data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 4,
                        'additionalBefore' => -1
                    ],
            ],
            [
                'wrong additional data' =>
                    [
                        'begin' => '21.04.2018',
                        'end' => '22.04.2018',
                        'adults' => 3,
                        'children' => 4,
                        'additionalAfter' => 'bbb'
                    ],
            ]
        ];
    }

}