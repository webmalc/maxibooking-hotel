<?php


namespace Tests\Bundle\SearchBundle\Services\Calc;


use MBH\Bundle\BaseBundle\Document\Base;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\PackageBundle\Document\PackagePrice;
use MBH\Bundle\SearchBundle\Lib\Exceptions\CalculationException;
use MBH\Bundle\SearchBundle\Lib\Exceptions\PriceCachesMergerException;
use MBH\Bundle\SearchBundle\Services\Calc\CalcQuery as Helper;
use MBH\Bundle\SearchBundle\Services\Calc\CalcQuery;
use MBH\Bundle\SearchBundle\Services\Calc\Calculation;

class CalculationTest extends WebTestCase
{

    /** @var Calculation */
    private $service;

    /** @var \MBH\Bundle\PackageBundle\Services\Calculation */
    private $oldService;

    public function setUp()
    {
        $this->service = $this->getContainer()->get('mbh_search.calculation');
        $this->oldService = $this->getContainer()->get('mbh.calculation');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    //** TODO: Обязательно добавить тест на доп цену ребенка на основное место */
    /** @dataProvider dataProviderRoomType */
    public function testCalcPrices($data): void
    {

        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');

        /** @var Hotel $hotel */
        $hotel = $dm->getRepository(Hotel::class)->findOneBy(['fullTitle' => $data['hotelName']]);
        $roomTypes = $hotel->getRoomTypes()->toArray();

        $documentName = $data['searchRoomTypeName'];
        $filter = function ($document) use (&$documentName) {
            /** @var Base $document */
            return $document->getName() === $documentName;
        };
        $roomTypeFiltered = array_filter($roomTypes, $filter);
        $searchRoomType = reset($roomTypeFiltered);

        $documentName = $data['searchTariffName'];
        $allTariffs = $hotel->getTariffs()->toArray();
        $searchTariffFiltered = array_filter($allTariffs, $filter);
        $searchTariff = reset($searchTariffFiltered);

        $begin = new \DateTime("midnight +{$data['beginOffset']} days");
        $end = new \DateTime("midnight +{$data['endOffset']} days");

        $variants = $data['variants'];
        foreach ($variants as $variant) {
            $calcQuery = new CalcQuery();
            $calcQuery
                ->setTariff($searchTariff)
                ->setRoomType($searchRoomType)
                ->setSearchBegin($begin)
                ->setSearchEnd($end)
                ->setIsUseCategory($data['isUseCategory'])
                ->setActualAdults($variant['adults'])
                ->setActualChildren($variant['children']);

            if ($data['isExpectException'] ?? null) {
                $this->expectException($data['expectedException']);
            }
            $actual = $this->service->calcPrices($calcQuery);
            $key = $variant['adults'] . '_' . $variant['children'];
            $this->assertArrayHasKey($key, $actual);
            $actualData = $actual[$key];
            $this->assertEquals($variant['total'], $actualData['total']);
            $this->assertContainsOnlyInstancesOf(PackagePrice::class, $actualData['packagePrices']);
            foreach (range(0, $data['endOffset'] - $data['beginOffset'] - 1) as $index) {
                /** @var PackagePrice $packagePrice */
                $packagePrice = $actualData['packagePrices'][$index];
                $this->assertEquals($variant['priceByDay'][$index], $packagePrice->getPrice(), 'Error in ' . (clone $begin)->modify("+ $index days")->format('d_m_Y'));
                $this->assertEquals($variant['tariffByDay'][$index], $packagePrice->getTariff()->getName());
            }
        }


    }

    public function testOldCalcPrices()
    {
        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');

        /** @var Hotel $hotel */
        $hotel = $dm->getRepository(Hotel::class)->findOneBy([]);
        $roomType = $hotel->getRoomTypes()->first();
        $tariff = $hotel->getTariffs()->first();
        $begin = new \DateTime("midnight");
        $end = new \DateTime("midnight +5 days");
        $adults = 2;
        $children = 1;

        $actual = $this->oldService->calcPrices($roomType, $tariff, $begin, (clone $end)->modify('-1 day'), 5, 4);
        $a = 'b';

    }

    public function dataProviderRoomType(): iterable
    {
        yield [
            [

                'isUseCategory' => false,
                'searchRoomTypeName' => 'ThreeAndThreeAndIndividualPriceRoomType',
                'searchTariffName' => 'Основной тариф',
                'hotelName' => 'Отель Волга',
                'beginOffset' => 8,
                'endOffset' => 13,
                'variants' => [
                    [
                        'adults' => 1,
                        'children' => 0,
                        'total' => 1900 * 5,
                        'priceByDay' => [1900, 1900, 1900, 1900, 1900],
                        'tariffByDay' => ['Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф'],
                    ],
                    [
                        'adults' => 3,
                        'children' => 0,
                        'total' => 2000 * 5,
                        'priceByDay' => [2000, 2000, 2000, 2000, 2000],
                        'tariffByDay' => ['Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф'],
                    ],
                    [
                        'adults' => 3,
                        'children' => 3,
                        'total' => 2000 * 5 + (700 + 200 + 200) * 5,
                        'priceByDay' => [3100, 3100, 3100, 3100, 3100],
                        'tariffByDay' => ['Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф'],
                    ],
                    [
                        'adults' => 6,
                        'children' => 0,
                        'total' => 2000 * 5 + (1500 + 300 + 300) * 5,
                        'priceByDay' => [4100, 4100, 4100, 4100, 4100],
                        'tariffByDay' => ['Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф', 'Основной тариф'],
                    ]
                ],

            ]
        ];

        yield [
            [

                'isUseCategory' => false,
                'searchRoomTypeName' => 'ThreeAndThreeAndIndividualPriceRoomType',
                'searchTariffName' => 'UpTariff',
                'hotelName' => 'Отель Волга',
                'beginOffset' => 2,
                'endOffset' => 10,
                'variants' => [
                    [
                        'adults' => 1,
                        'children' => 0,
                        'total' => 1900 * 2 + 1890 * 4 + 1880 * 2,
                        'priceByDay' => [1900, 1900, 1890, 1890, 1890, 1890, 1880, 1880],
                        'tariffByDay' => ['Основной тариф', 'Основной тариф', 'DownTariff', 'DownTariff', 'DownTariff', 'DownTariff', 'UpTariff', 'UpTariff'],
                    ],
                    [
                        'adults' => 1,
                        'children' => 0,
                        'total' => 1900 * 2 + 1890 * 4 + 1880 * 2,
                        'priceByDay' => [1900, 1900, 1890, 1890, 1890, 1890, 1880, 1880],
                        'tariffByDay' => ['Основной тариф', 'Основной тариф', 'DownTariff', 'DownTariff', 'DownTariff', 'DownTariff', 'UpTariff', 'UpTariff'],
                    ],
                ],

            ]
        ];

        yield [
            [

                'isUseCategory' => false,
                'searchRoomTypeName' => 'ThreeAndThreeAndIndividualPriceRoomType',
                'searchTariffName' => 'UpTariff',
                'hotelName' => 'Отель Волга',
                'beginOffset' => 24,
                'endOffset' => 32,
                'isExpectException' => true,
                'expectedException' => PriceCachesMergerException::class,
                'variants' => [
                    [
                        'adults' => 1,
                        'children' => 0,
                    ],
                ],

            ]
        ];
    }

    public function dataProviderCategory(): iterable
    {

    }
}