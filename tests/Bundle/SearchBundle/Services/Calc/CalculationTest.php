<?php


namespace Tests\Bundle\SearchBundle\Services\Calc;


use MBH\Bundle\BaseBundle\Document\Base;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\SearchBundle\Lib\Exceptions\CalculationException;
use MBH\Bundle\SearchBundle\Services\Calc\CalcQuery as Helper;
use MBH\Bundle\SearchBundle\Services\Calc\CalcQuery;
use MBH\Bundle\SearchBundle\Services\Calc\Calculation;

class CalculationTest extends WebTestCase
{

    /** @var Calculation */
    private $service;

    /** @var \MBH\Bundle\PackageBundle\Services\Calculation */
    private $oldService;

    public function setUp()
    {
        $this->service = $this->getContainer()->get('mbh_search.calculation');
        $this->oldService = $this->getContainer()->get('mbh.calculation');
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @dataProvider dataProviderRoomType */
    public function testCalcPrices($data): void
    {

        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');

        /** @var Hotel $hotel */
        $hotel = $dm->getRepository(Hotel::class)->findOneBy(['fullTitle' => $data['hotelName']]);
        $roomTypes = $hotel->getRoomTypes()->toArray();

        $documentName = $data['searchRoomTypeName'];
        $filter = function ($document) use (&$documentName) {
            /** @var Base $document */
            return $document->getName() === $documentName;
        };
        $roomTypeFiltered = array_filter($roomTypes, $filter);
        $searchRoomType = reset($roomTypeFiltered);

        $documentName = $data['searchTariffName'];
        $allTariffs = $hotel->getTariffs()->toArray();
        $searchTariffFiltered = array_filter($allTariffs, $filter);
        $searchTariff = reset($searchTariffFiltered);

        $begin = new \DateTime("midnight +{$data['beginOffset']} days");
        $end = new \DateTime("midnight +{$data['endOffset']} days");

        $calcQuery = new CalcQuery();
        $calcQuery
            ->setTariff($searchTariff)
            ->setRoomType($searchRoomType)
            ->setSearchBegin($begin)
            ->setSearchEnd($end)
            ->setIsUseCategory($data['isUseCategory'])
            ->setActualAdults($data['adults'])
            ->setActualChildren($data['children'])
        ;

        if ($data['expectException']) {
            $this->expectException(CalculationException::class);
        }

        $actual = $this->service->calcPrices($calcQuery);

        $a = 'b';
    }

    public function testOldCalcPrices()
    {
        $dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');

        /** @var Hotel $hotel */
        $hotel = $dm->getRepository(Hotel::class)->findOneBy([]);
        $roomType = $hotel->getRoomTypes()->first();
        $tariff = $hotel->getTariffs()->first();
        $begin = new \DateTime("midnight");
        $end = new \DateTime("midnight +5 days");
        $adults = 2;
        $children = 1;

        $actual = $this->oldService->calcPrices($roomType, $tariff, $begin, (clone $end)->modify('-1 day'), 5, 4);
        $a = 'b';

    }

    public function dataProviderRoomType(): iterable
    {
        yield [
            [
                'expectException' => false,
                'isUseCategory' => false,
                'searchRoomTypeName' => 'ThreeAndThreeAndIndividualPriceRoomType',
                'searchTariffName' => 'Основной тариф',
                'hotelName' => 'Отель Волга',
                'beginOffset' => 8,
                'endOffset' => 22,
                'adults' => 2,
                'children' => 2,
                'expectedPrice' => [
                    'total' => 333,
                    'priceByDays' => [
                        '333','333','333'
                    ]
                ]
            ]
        ];
    }

    public function dataProviderCategory(): iterable
    {

    }
}