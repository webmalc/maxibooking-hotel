<?php

namespace Tests\Bundle\SearchBundle\Tests\Controller;

use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\ClientBundle\Document\ClientConfig;
use MBH\Bundle\ClientBundle\Document\ClientConfigRepository;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\HotelBundle\Document\RoomType;
use MBH\Bundle\HotelBundle\Document\RoomTypeCategory;

class SearchControllerTest extends WebTestCase
{

    /** @var DocumentManager */
    private $dm;

    public function setUp()
    {
        $this->dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    /** @dataProvider dataProvider
     * @param $data
     */
    public function testSearchRequest($data): void
    {
        $this->useCategoryOn();
        $begin = new \DateTime("midnight +{$data['beginOffset']} days");
        $end = new \DateTime("midnight +{$data['endOffset']} days");
        $hotels = $this->dm->getRepository(Hotel::class)->getByFullTitle($data['hotels'])->toArray();
        if ($data['useCategory']) {
            $roomTypes = $this->dm->getRepository(RoomTypeCategory::class)->getByHotelsIdsAndFullTitle(array_keys($hotels), $data['roomTypes']);
        } else {
            $roomTypes = $this->dm->getRepository(RoomType::class)->getByHotelsIdsAndFullTitle(array_keys($hotels), $data['roomTypes']);
        }

        $tariffs = [];

        $inputData = [
            'url' => '/search/json',
            'data' => [
                'begin' => $begin->format('d.m.Y'),
                'end' => $end->format('d.m.Y'),
                'adults' => $data['adults'],
                'children' => $data['children'],
                'childrenAges' => $data['childrenAges'],
                'additionalBegin' => $data['additionalBegin'],
                'hotels' => array_keys($hotels),
                'roomTypes' => array_keys($roomTypes),
                'tariffs' => array_keys($tariffs)
            ]
        ];

        $json = json_encode($inputData['data']);
        $this->client->request(
            'POST',
            $inputData['url'],
            [],
            [],
            ['CONTENT_TYPE' => 'application/json'],
            $json
        );

        $this->isSuccessful($this->client->getResponse());
        $content = $this->client->getResponse()->getContent();
        $this->assertJson($content, 'No JSON Returned');
        $actualData = json_decode($content, true);
        $this->assertInternalType('string', $actualData['queryHash']);
        $this->assertEquals($data['expectedStatus'], $actualData['status']);

        /*$this->assertJsonStringEqualsJsonString(json_encode($inputData['results']), $content, 'JSON Content is wrong');*/
    }

    public function dataProvider(): iterable
    {
        yield [
            [
                'beginOffset' => 2,
                'endOffset' => 10,
                'useCategory' => true,
                'hotels' => ['Отель Волга'],
                'roomTypes' => ['AdditionalPlacesCategory'],
                'tariffs' => [],
                'adults' => 0,
                'children' => 0,
                'childrenAges' => [],
                'additionalBegin' => 2 ,
                'expectedQueries' => 0,
                'expectedResults' => 0,
                'expectedStatus' => 'ok'
            ]
        ];
    }

    public function tearDown()
    {

        $this->useCategoryOn(false);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    private function useCategoryOn(bool $isUseCategory = true)
    {
        $config = $this->dm->getRepository(ClientConfig::class)->fetchConfig();
        /** @var ClientConfig $config */
        $config->setUseRoomTypeCategory($isUseCategory);
        $this->dm->flush($config);
    }


}
