<?php


namespace Tests\Bundle\SearchBundle;


use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ODM\MongoDB\DocumentManager;
use MBH\Bundle\BaseBundle\Lib\Test\WebTestCase;
use MBH\Bundle\HotelBundle\Document\Hotel;
use MBH\Bundle\SearchBundle\Document\SearchConditions;
use MBH\Bundle\SearchBundle\Lib\SearchQuery;

abstract class SearchWebTestCase extends WebTestCase
{
    /** @var DocumentManager */
    protected $dm;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
//        self::baseFixtures();
        $this->dm = $this->getContainer()->get('doctrine_mongodb.odm.default_document_manager');
    }

    /**
     * @param array $documents
     * @param string $documentFullTitle
     * @return mixed
     */


    protected function getDocumentFromArrayByFullTitle(array $documents, string $documentFullTitle)
    {
        $filter = function ($document) use ($documentFullTitle) {
            return $document->getFullTitle() === $documentFullTitle;
        };
        $documentFiltered = array_filter($documents, $filter);

        return reset($documentFiltered);
    }

    /**
     * @param array $data
     * @return SearchQuery
     */
    protected function createSearchQuery(array $data): SearchQuery
    {
        $queries = $this->createSearchQueries($data);

        return reset($queries);

    }

    protected function createSearchQueries(array $data): array
    {
        /** @var Hotel $hotel */
        $hotel = $this->dm->getRepository(Hotel::class)->findOneBy(['fullTitle' => $data['hotelFullTitle']]);
        $roomTypes = $hotel->getRoomTypes()->toArray();
        $searchRoomType = $this->getDocumentFromArrayByFullTitle($roomTypes, $data['roomTypeFullTitle']);
        $hotelTariffs = $hotel->getTariffs()->toArray();
        $searchTariff = $this->getDocumentFromArrayByFullTitle($hotelTariffs, $data['tariffFullTitle']);
        $begin = new \DateTime("midnight +{$data['beginOffset']} days");
        $end = new \DateTime("midnight +{$data['endOffset']} days");

        $searchHash = uniqid(gethostname(), true);
        $conditions = new SearchConditions();
        $conditions
            ->setBegin($begin)
            ->setEnd($end)
            ->setAdditionalBegin(0)
            ->setAdditionalEnd(0)
            ->setSearchHash($searchHash)
            ->setTariffs(new ArrayCollection([$searchTariff]))
            ->setRoomTypes(new ArrayCollection([$searchRoomType]))
        ;
        if ($data['adults'] ?? null) {
            $conditions->setAdults($data['adults']);
        }
        if($data['children'] ?? null) {
            $conditions->setChildren($data['children']);
            $conditions->setChildrenAges($data['childrenAges']);
        }
//
//        /** @var Tariff $searchTariff */
//        if ($searchTariff->getParent() && $searchTariff->getChildOptions() && $searchTariff->getChildOptions()->isInheritRestrictions()) {
//            $restrictionTariffId = $searchTariff->getParent()->getId();
//        } else {
//            $restrictionTariffId = $searchTariff->getId();
//        }
//
//
//        $searchQuery = new SearchQuery();
//        $searchQuery
//            ->setBegin($begin)
//            ->setEnd($end)
//            ->setSearchHash($searchHash)
//            ->setRoomTypeId($searchRoomType->getId())
//            ->setRestrictionTariffId($restrictionTariffId)
//        ;
//
//        $searchQuery->setSearchConditions($conditions);
        $searchQueries = $this->getContainer()->get('mbh_search.search_query_generator')->generateSearchQueries($conditions);

        return $searchQueries;
    }

}