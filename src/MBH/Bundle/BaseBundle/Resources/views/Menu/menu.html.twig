{% extends '@KnpMenu/menu.html.twig' %}

{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not same as(false) -%}
            {{- ' %s="%s"'|format(name, value is same as(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% import _self as macros %}


{% block item %}

    {%- set attributes = item.attributes %}
    {%- set header = item.attributes.header|default(false) %}

    {% if header %}

        {%- set header_icon = attributes.header_icon|default(false) %}
        <li class="header">
            {% if header_icon %}<i class="{{ header_icon }}"></i>&nbsp;{% endif %}{{ header|trans }}
        </li>
    {% elseif item.displayed and header is empty %}

        {%- set is_dropdown = attributes.dropdown|default(false) %}
        {%- set is_dropdown_header = attributes.dropdown_header|default(false) %}
        {%- set divider_prepend = attributes.divider_prepend|default(false) %}
        {%- set divider_append = attributes.divider_append|default(false) %}

        {# unset bootstrap specific attributes #}
        {%- set attributes = attributes|merge({'dropdown': null, 'dropdown_header': null, 'divider_prepend': null, 'divider_append': null }) %}

        {%- if divider_prepend %}
            {{ block('dividerElement') }}
        {%- endif %}

        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if item.current %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# building the class of the children #}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

        {# adding classes for dropdown #}
        {%- if is_dropdown %}
            {%- set classes = classes|merge(['dropdown']) %}
            {%- set childrenClasses = childrenClasses|merge(['treeview-menu']) %}
        {%- endif %}

        {# putting classes together #}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}


        {%- if is_dropdown_header %}
            {{ block('dropdownHeader') }}
        {%- else %}
            {# displaying the item #}
            <li{{ macros.attributes(attributes) }}>
                {%- if is_dropdown %}
                    {% if item.hasChildren %} {{ block('dropdownElement') }}{% endif %}
                {%- elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                    {{ block('linkElement') }}
                {%- else %}
                    {{ block('linkElement') }}
                {%- endif %}
                {# render the list of children#}
                {{ block('list') }}
            </li>
        {%- endif %}

        {%- if divider_append %}
            {{ block('dividerElement') }}
        {%- endif %}
    {% endif %}
{% endblock %}

{% block dividerElement %}
    {% if item.level == 1 %}
        <li class="divider-vertical"></li>
    {% else %}
        <li class="divider"></li>
    {% endif %}
{% endblock %}

{% block dropdownHeader %}
    <li role="presentation" class="dropdown-header">{{ item.label }}</li>
{% endblock %}

{% block dropdownElement %}
    {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
    {%- set attributes = item.linkAttributes %}
    {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}

    {% spaceless %}
        <a href="#"{{ macros.attributes(attributes) }}>
            {% if item.attribute('icon') is not empty %}
                <i class="{{ item.attribute('icon') }}"></i>
            {% endif %}
            {{ block('label') }} <i class="fa fa-angle-left pull-right"></i>
        </a>
    {% endspaceless %}
{% endblock %}

{% block linkElement %}
    <a href="{{ item.uri }}"{{ macros.attributes(item.linkAttributes) }}>
        {% if item.attribute('icon') is not empty %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
    </a>
{% endblock %}

{% block spanElement %}
    <span>{{ macros.attributes(item.labelAttributes) }}
        {% if item.attribute('icon') is not empty %}
            <i class="{{ item.attribute('icon') }}"></i>
        {% endif %}
        {{ block('label') }}
    </span>
{% endblock %}

{% block label %}<span>{% if item.label == '&nbsp;' %}&nbsp;{% else %}{{ item.label|trans }}</span>
    {% if item.attribute('badge_left') is defined %}
        <small {% if item.attribute('badge_title_left') is defined %}data-toggle="tooltip" data-placement="top" title="{{ item.attribute('badge_title_left') }}"{% endif %}  {% if item.attribute('badge_id_left') is defined %}id="{{ item.attribute('badge_id_left') }}"{% endif %}
               class="label {% if item.attribute('badge_class_left') is defined %}{{ item.attribute('badge_class_left') }}{% endif %}">{{ item.attribute('badge_value_left') }}</small>
    {% endif %}
    {% if item.attribute('badge') is defined %}
        <small {% if item.attribute('badge_title_right') is defined %}data-toggle="tooltip" data-placement="top" title="{{ item.attribute('badge_title_right') }}"{% endif %} {% if item.attribute('badge_id_right') is defined %}id="{{ item.attribute('badge_id_right') }}"{% endif %}
               class="label {% if item.attribute('badge_class_right') is defined %}{{ item.attribute('badge_class_right') }}{% endif %}">{{ item.attribute('badge_value_right') }}</small>
    {% endif %}
{% endif %}{% endblock %}
