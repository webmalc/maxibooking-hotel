{% wrapinline %}
var isMobileDevice = (function() {
    var isMobile = /Mobi/.test(navigator.userAgent);
    if (isMobile) {
        isMobile = !(/iPad|vivo/.test(navigator.userAgent));
    }
    return function() {
        return isMobile;
    }
})();

function addLoadEvent(func) {
    var oldonload = window.onload;
    if (typeof window.onload !== 'function') {
        window.onload = func;
    } else {
        window.onload = function () {
            if (oldonload) {
                oldonload();
            }
            func();
        };
    }
}

function OnLoadFormLoad() {
    this.formWrapper = null;
    this.spinner = null;
    this.calendarIframe = null;
    this.additionalFormIframe = null;
    this.searchIframe = null;
    this.itIsFirstLoad = true;

    this.yaCounterId = '{{ metric.yaCounterId }}';
    this.googleCounterId = '{{ metric.googleCounterId }}';

    this.useAdditonalForm = {{ formConfig.useAdditionalForm ? 'true' : 'false' }};

    this.urlIframe = {
        calendar      : '{{ urls.calendar }}',
        additionalForm: '{{ urls.additionalForm }}',
        search        : '{{ urls.search }}'
    };
    this.sizeIframe = {
        search        : {
            width : '{{ size.search.width }}',
            height: '{{ size.search.height }}'
        },
        calendar      : {
            width : '{{ size.calendar.width }}',
            height: '{{ size.calendar.height }}'
        },
        additionalForm: {
            width : '{{ size.additionalForm.width }}',
            height: '{{ size.additionalForm.height }}'
        }
    };
}

OnLoadFormLoad.prototype.createIframeWithCalendar = function() {
    var calendarFrame = document.createElement('iframe');
    calendarFrame.id = 'mbh-form-calendar';
    calendarFrame.style.display = 'none';
    calendarFrame.style.zIndex = '1000';
    calendarFrame.style.position = 'absolute';
    calendarFrame.style.top = '0px';
    calendarFrame.setAttribute('scrolling', "no");
    calendarFrame.setAttribute('frameborder', 0);
    calendarFrame.setAttribute('width', this.sizeIframe.calendar.width);
    calendarFrame.setAttribute('height', this.sizeIframe.calendar.height);
    calendarFrame.setAttribute('src', this.urlIframe.calendar);
    calendarFrame.setAttribute('title', 'Support frame with calendar for search form.');

    document.body.appendChild(calendarFrame);

    return calendarFrame;
};

OnLoadFormLoad.prototype.createIframeWithAdditionalForm = function() {
    if (!this.useAdditonalForm) {
        return null;
    }

    var additionalFormFrame = document.createElement('iframe');
    additionalFormFrame.id = 'mbh-form-additional-data';
    additionalFormFrame.style.display = 'none';
    additionalFormFrame.style.zIndex = '1000';
    additionalFormFrame.style.position = 'absolute';
    additionalFormFrame.style.top = '0px';
    additionalFormFrame.scrolling = "no";
    additionalFormFrame.setAttribute('frameborder', 0);
    additionalFormFrame.width = this.sizeIframe.additionalForm.width;
    additionalFormFrame.height = this.sizeIframe.additionalForm.height;
    additionalFormFrame.src = this.urlIframe.additionalForm;
    additionalFormFrame.title = 'Support frame with additional data for search form.';

    document.body.appendChild(additionalFormFrame);

    return additionalFormFrame;
};

OnLoadFormLoad.prototype.waitingSpinner =  function() {
    var text = /\.ru/.test(window.location.hostname) ? 'Подождите...' : 'Please wait...',
        spinner = document.createElement('div');
    spinner.id = 'mbh-form-load-spinner';
    spinner.className = 'alert alert-info';
    spinner.innerHTML = '<i class="fa fa-spinner fa-spin"></i> ' + text;

    this.formWrapper.appendChild(spinner);

    return spinner;
};

OnLoadFormLoad.prototype.getCoords = function () {
    var box = this.searchIframe.getBoundingClientRect();

    var body = document.body;
    var docEl = document.documentElement;

    var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;

    var clientTop = docEl.clientTop || body.clientTop || 0;
    var clientLeft = docEl.clientLeft || body.clientLeft || 0;

    var top = box.top + scrollTop - clientTop;
    var left = box.left + scrollLeft - clientLeft;

    return {top: Math.round(top), left: Math.round(left)};
};

OnLoadFormLoad.prototype.hideIframe = function (element) {
    if (element === null) {
        return;
    }

    element.style.display = 'none';
};

OnLoadFormLoad.prototype.processMessage = function (e) {
    if (e.data.type !== 'mbh') {
        return;
    }

    var target = null;
    if (e.data.target === 'form') {
        target = this.searchIframe;
    }
    if (e.data.target === 'calendar') {
        target = this.calendarIframe;
    }

    if (e.data.target === 'additionalFromDataForParentForm') {
        target = this.additionalFormIframe;
    }

    if (target) {
        target.contentWindow.postMessage(e.data, '*');

        return;
    }
    if (e.data.action === 'showCalendar') {
        this.showIframe(e, this.calendarIframe);

        return;
    }

    if (e.data.action === 'showAdditionalForm') {
        this.showIframe(e, this.additionalFormIframe);

        return;
    }
    if (e.data.action === 'hideCalendar') {
        this.hideIframe(this.calendarIframe);

        return;
    }

    if (e.data.action === 'hideAdditionalForm') {
        this.hideIframe(this.additionalFormIframe);
    }
};

OnLoadFormLoad.prototype.showIframe = function (event, element) {
    var c = this.getCoords();

    element.style.display = 'block';
    element.style.top = (event.data.top + c.top - 10) + 'px';
    element.style.left = (isMobileDevice() ? event.data.left : (event.data.left + c.left)) + 'px';
    element.contentWindow.postMessage(event.data, '*');
};

OnLoadFormLoad.prototype.resizeIframeWidth = function () {
    var width = window.outerWidth;
    if (this.searchIframe && width) {
        this.searchIframe.width = width < this.sizeIframe.search.width ? width : this.sizeIframe.search.width;
    }
};
OnLoadFormLoad.prototype.resizeIframeHeight = function (event) {
    if (event.data.type !== 'mbh') {
        return;
    }
    if (event.data.action === 'formResize') {
        this.searchIframe.height = event.data.formHeight + 5;
    }

    if (event.data.action === 'additionalFormIFrameResize') {
        this.additionalFormIframe.height = event.data.formHeight + 3;
    }
};

OnLoadFormLoad.prototype.fillObject = function (object, data) {
    var temp = data.split('='),
        value = temp[1] !== '' && !isNaN(temp[1]) ? parseInt(temp[1]) : temp[1];

    if (temp[0].indexOf('children-ages') !== -1) {
        if (object['children-ages'] === undefined) {
            object['children-ages'] = [];
        }
        object['children-ages'].push(value);
    } else {
        object[temp[0]] = value
    }
};

OnLoadFormLoad.prototype.changeUrl = function (oldUrl) {
    var _this = this,
        indexChart = oldUrl.indexOf('?');

    if (indexChart === -1) {
        return oldUrl + window.location.search;
    }

    var params = {},
        oldParams = {};

    window.location.search.replace('?', '').split('&').forEach(function(value) { _this.fillObject(params, value); });

    oldUrl.slice(indexChart + 1).split('&').forEach(function(value) { _this.fillObject(oldParams, value); });

    var key;
    for (key in oldParams) {
        if (params[key] === undefined) {
            params[key] = oldParams[key];
        }
    }

    var temp = [];

    for (key in params) {
        if (Array.isArray(params[key])) {
            params[key].forEach( function (value) {
                temp.push(key + '=' + value);
            });
        } else {
            temp.push(key + '=' + params[key]);
        }
    }

    return oldUrl.substring(0, indexChart) + '?' + temp.join('&');
};

OnLoadFormLoad.prototype.createIframeWithForm = function () {
    var url = this.urlIframe.search;

    if (window.location.search !== '') {
        url = this.changeUrl(url);
    }

    this.searchIframe = document.createElement('iframe');
    this.searchIframe.id = 'mbh-form-iframe';
    this.searchIframe.scrolling = 'no';
    this.searchIframe.frameBorder = '0';
    this.searchIframe.src = url;
    this.searchIframe.width = '100%';
    this.searchIframe.hidden = true;
    this.searchIframe.title = 'Frame with search form.';
};

OnLoadFormLoad.prototype.exec = function () {
    this.formWrapper = document.getElementById('mbh-form-wrapper');
    if (!this.formWrapper) {
        return;
    }

    var _this = this;

    this.formWrapper.innerText = '';

    this.spinner = this.waitingSpinner();

    this.createIframeWithForm();
    this.formWrapper.appendChild(this.searchIframe);

    this.searchIframe.addEventListener('load', function() {
        _this.hideWaitingSpinner(this);
    }, {once: true});

    if (this.itIsFirstLoad) {

        this.metric(this);

        this.calendarIframe = this.createIframeWithCalendar();

        this.additionalFormIframe = this.createIframeWithAdditionalForm();

        document.addEventListener("click", function(ev) {
            _this.hideIframe(_this.calendarIframe);
            _this.hideIframe(_this.additionalFormIframe);
        });
        document.addEventListener("keyup", function (e) {
            if (e.keyCode === 27) {
                _this.hideIframe(_this.calendarIframe);
                _this.hideIframe(_this.additionalFormIframe);
            }
        });

        setInterval(function () {
            _this.resizeIframeWidth();
        }, 300);

        window.addEventListener('message', function(ev) {
            _this.processMessage(ev);
        }, false);
        window.addEventListener("message", function(ev) {
            _this.resizeIframeHeight(ev);
        }, false);
    }

    this.itIsFirstLoad = false;
};

OnLoadFormLoad.prototype.metric = function (self) {
    var useYaMetrics = this.yaCounterId !== '';
    if (useYaMetrics) {
        var yaCounterObjName = 'yaCounter' + this.yaCounterId;
        {#<!-- Yandex.Metrika counter -->#}
        (function (d, w, c) {
            (w[c] = w[c] || []).push(function () {
                try {
                    w[yaCounterObjName] = new Ya.Metrika({
                        id: self.yaCounterId,
                        clickmap: true,
                        trackLinks: true,
                        accurateTrackBounce: true,
                        webvisor: true
                    });
                } catch (e) {
                }
            });

            var n = d.getElementsByTagName("script")[0],
                s = d.createElement("script"),
                f = function () {
                    n.parentNode.insertBefore(s, n);
                };
            s.type = "text/javascript";
            s.async = true;
            s.src = "https://mc.yandex.ru/metrika/watch.js";

            if (w.opera == "[object Opera]") {
                d.addEventListener("DOMContentLoaded", f, false);
            } else {
                f();
            }
        })(document, window, "yandex_metrika_callbacks");
        {#<!-- /Yandex.Metrika counter -->#}
    }

    var useGoogleMetrics = this.googleCounterId !== '';
    if (useGoogleMetrics) {
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

        ga('create', this.googleCounterId, 'auto');
        ga('send', 'pageview');
    }

    if (useYaMetrics || useGoogleMetrics) {
        var processMetricMessage = function (e) {
            if (e.data.type === 'form-event') {
                var purposeType = e.data.purpose;
                if (useYaMetrics) {
                    window[yaCounterObjName].reachGoal(purposeType);
                }
                if (useGoogleMetrics) {
                    ga('send', 'event', purposeType, 'click');
                }
            }
        };

        window.addEventListener("message", processMetricMessage, false);
    }
};

OnLoadFormLoad.prototype.hideWaitingSpinner = function (_this) {
    this.spinner.className = '';
    this.spinner.innerHTML = '';
    _this.hidden = false;
};

var onLoadFormLoad = new OnLoadFormLoad();
addLoadEvent(onLoadFormLoad.exec());
{% endwrapinline %}
